{"name":"Hexameter","tagline":"Hexameter is a GUI agnostic hexagonal grid library written in java.","body":"# Hexameter\r\n\r\nHexameter is a hexagonal grid library. The motivation behind it is to have\r\nan optimized, simple and usable library for drawing hexagonal grids without\r\nbeing tied to any GUI framework.\r\nIt is **100% unit tested**.\r\n\r\n[![Build Status](https://api.travis-ci.org/Hexworks/hexameter.svg)](https://travis-ci.org/Hexworks/hexameter)\r\n\r\n# Getting started\r\n\r\nThis library uses [Amit's guide to hexagonal grids](http://www.redblobgames.com/grids/hexagons/). The coordinate system\r\nby this library is the Axial coordinate system. Please check [here](http://www.redblobgames.com/grids/hexagons/#coordinates) for\r\nfurther details.\r\n\r\nHexagonal grids come in **flat topped** and **pointy topped** shapes. The grid can have several layouts:\r\n - Hexagonal: the width and height of a this layout has to be equal and both have to be an odd number.\r\n - Triangular: the width and height of a this layout has to be equal.\r\n - Rectangular: no special rules\r\n - Trapezoid: no special rules\r\n - Empty: no special rules\r\n\r\nApart from the *Empty* grid layout all layouts have *with* and *height* values of at least **1**. You can consult [HexagonalGridLayout](https://github.com/adam-arold/hexameter/blob/master/hexameter-core/src/main/java/org/codetome/hexameter/api/HexagonalGridLayout.java) if you need further details.\r\n\r\nThis library is not tied to any GUI implementation. All operations provided by the [API](https://github.com/adam-arold/hexameter/tree/master/hexameter-core/src/main/java/org/codetome/hexameter/api) are working using the most abstract concept possible.\r\n\r\n## Basic usage\r\n\r\n### Creating a grid\r\n\r\nYou can use the [HexagonalGridBuilder](https://github.com/adam-arold/hexameter/blob/master/hexameter-core/src/main/java/org/codetome/hexameter/api/HexagonalGridBuilder.java) from the API package to create a [HexagonalGrid](https://github.com/adam-arold/hexameter/blob/master/hexameter-core/src/main/java/org/codetome/hexameter/api/HexagonalGrid.java):\r\n\r\n    // ...\r\n    private static final int GRID_HEIGHT = 9;\r\n    private static final int GRID_WIDTH = 9;\r\n    private static final HexagonalGridLayout GRID_LAYOUT = RECTANGULAR;\r\n    private static final HexagonOrientation ORIENTATION = FLAT_TOP;\r\n    private static final double RADIUS = 30;\r\n\r\n    // ...\r\n    HexagonalGriBuilder builder = new HexagonalGridBuilder()\r\n        .setGridHeight(GRID_HEIGHT)\r\n        .setGridWidth(GRID_WIDTH)\r\n        .setGridLayout(GRID_LAYOUT)\r\n        .setOrientation(ORIENTATION)\r\n        .setRadius(RADIUS);\r\n\r\n    HexagonalGrid grid = builder.build();\r\n\r\nYou can also use the [HexagonalGridBuilder](https://github.com/adam-arold/hexameter/blob/master/hexameter-core/src/main/java/org/codetome/hexameter/api/HexagonalGridBuilder.java) to create a [HexagonalGridCalculator](https://github.com/adam-arold/hexameter/blob/master/hexameter-core/src/main/java/org/codetome/hexameter/api/HexagonalGridCalculator.java) for you which supports advanced operations\r\non [HexagonalGrid](https://github.com/adam-arold/hexameter/blob/master/hexameter-core/src/main/java/org/codetome/hexameter/api/HexagonalGrid.java)s:\r\n\r\n    HexagonalGridCalculator calculator = builder.buildCalculatorFor(grid);\r\n\r\n### Drawing a grid\r\n\r\nFirst you want to fetch all the `Hexagon`s from your grid:\r\n\r\n    Collection<Hexagon> hexagons = grid.getHexagons();\r\n\r\nAfter that you can iterate over all the `Point`s of your `Hexagon`s:\r\n\r\n    hexagons.forEach(hexagon -> {\r\n\t\thexagon.getPoints().forEach(point -> {\r\n\t\t\t// your draw logic here\r\n\t\t});\r\n\t});\r\n\r\nNote that each `Point` represents a coordinate in 2D space. You can use them for drawing.\r\n\r\n### Manipulating your grid\r\n\r\nThere are basically only three operations for manipulating the data on your grid:\r\n- The `addHexagon(AxialCoordinate coordinate)` operation which adds a `Hexagon` at an arbitrary coordinate.\r\n- The `removeHexagon(AxialCoordinate coordinate)` operation which removes a `Hexagon` at an arbitrary coordinate.\r\n- The `setSatelliteData(T data)` operation which you can use to add arbitrary data to any `Hexagon`\r\n\r\nThere is also a `clearSatelliteData()` method for clearing all satellite data from your grid.\r\n\r\nNote that adding or removing a `Hexagon` does not interfere with other operations on the grid. If for example you\r\nget a range of `Hexagon`s using the `getHexagonsByAxialRange` method it will simply ignore any missing `Hexagon`s.\r\n\r\nIf you don't want to use the provided layouts you can use the `EMPTY` layout and fill your grid by using the `addHexagon` method.\r\n\r\n### GUI example:\r\n\r\nYou can find a simple GUI example in the `hexameter-swt-example` submodule. Run it by doing the following steps.\r\n\r\n1. Clone the project: `git clone git@github.com:adam-arold/hexameter.git`\r\n2. cd to the newly created `hexameter` folder: `cd hexameter/`\r\n3. build the project: `mvn clean install`\r\n4. run the created uberjar: `java -jar ./hexameter-swt-example/target/hexameter-swt-example-1.0.0.jar`\r\n\r\n\r\n### Supported operations\r\n - Getting a hexagon by its grid coordinate\r\n - Getting a hexagon by its pixel coordinate\r\n - Getting the neighbors of a hexagon\r\n - Calculating the distance between two hexagons\r\n - Calculating the movement range from a hexagon\r\n - Adding/removing a Hexagon from the grid\r\n - Checking whether a Hexagon is on a grid or not\r\n - Supplying a custom storage object\r\n - Adding custom data to a Hexagon\r\n - Clearing all custom data from the HexagonalGrid\r\n - Getting a subset of Hexagons (using axial or offset cooridnate range) from the grid\r\n\r\nCheck these interfaces for more details:\r\n\r\n- [HexagonalGridBuilder](https://github.com/adam-arold/hexameter/blob/master/hexameter-core/src/main/java/org/codetome/hexameter/api/HexagonalGridBuilder.java)\r\n- [HexagonalGrid](https://github.com/adam-arold/hexameter/blob/master/hexameter-core/src/main/java/org/codetome/hexameter/api/HexagonalGrid.java)\r\n- [HexagonalGridCalculator](https://github.com/adam-arold/hexameter/blob/master/hexameter-core/src/main/java/org/codetome/hexameter/api/HexagonalGridCalculator.java)\r\n- [Hexagon](https://github.com/adam-arold/hexameter/blob/master/hexameter-core/src/main/java/org/codetome/hexameter/api/Hexagon.java)\r\n\r\n## Roadmap:\r\n - Field of view calculation with obstacles\r\n - Pathfinding with obstacles\r\n - Movement range with obstacles\r\n\r\n## License\r\nHexameter is made available under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\r\n\r\n## Credits\r\nHexameter is created and maintained by Adam Arold\r\n\r\n*I'm open to suggestions, feel free to comment or to send me a message.\r\nPull reqeusts are also welcome!*\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}